<?php
/*
 *
 *
 *
 *
 *	This Codeigniter model file is automatically generated by Code Generator.
 * 	Filename 		: 	Users_model.php
 * 	Generated 		: 	03-31-2018|14:09:22
 **/
defined('BASEPATH') OR exit ('No direct script to access allowed');

class Users_model extends CI_Model 
{ 
	public $ID;
	public $Position_ID;
	public $First_name;
	public $Last_name;
	public $Username;
	public $Password;
	public $Salt;

	public $Restrict_access;
	public $Full_control;
	public $Read_only;
	public $Write_only;

	function save()
 	{
		/*
		 *
		 * 
	     * generate default password 
		 * */
		$salt = salt_generator(32);
		$password = sha1($salt ." ". $this->config->item('default_password') ." ". $salt);

		try
		{
			if (empty($this->First_name) || empty($this->Last_name) || empty($this->Username))
			{
				throw new Exception(REQUIRED_FIELD);
			}

			if(empty($this->ID) || $this->ID == 0)
			{

				$data = array(
					'Position_ID'	=>	$this->Position_ID,
					'First_name'	=>	$this->First_name,
					'Last_name'	=>	$this->Last_name,
					'Username'	=>	$this->Username,
					'Password'	=>	$password,
					'Salt'	=>	$salt
				);

				/*
				 *
				 * 
				 * check first if username already exists 
				 * */
				$this->db->select('ID');
				$this->db->from('tbl_users');
				$this->db->where('Username', $this->Username);
				$this->db->where('Position_ID', $this->Position_ID);
				$query = $this->db->get();
			
				if ($query->num_rows() > 0)
				{
					throw new Exception(DUPLICATE_RECORD);
				}

				$this->db->insert('tbl_users', $data);
				$ID = $this->db->insert_id();
				
				echo json_encode(
						array("ID" => $ID));
			}
			else
			{
				$data = array(
					'Position_ID'	=>	$this->Position_ID,
					'First_name'	=>	$this->First_name,
					'Last_name'	=>	$this->Last_name,
					'Username'	=>	$this->Username,
				);

				$this->db->where('ID', $this->ID);
				$this->db->update('tbl_users', $data);
			}
		}
		catch (Exception $ex) 
		{ 
			$error = array('error_message' => $ex->getMessage(), 
				'has_error' => true);
			echo json_encode($error);
		}
	}

	function save_user_module()
	{
		try
		{
			//
			//
			// delete all user modules
			$this->delete_user_module($this->ID);

			foreach($this->Module_ID as $item)
			{
				$data = array(
					'Module_ID'	=>	$item,
					'User_ID'	=>	$this->ID,
				);

				$this->db->insert('tbl_user_modules', $data);
			}

			foreach($this->Restrict_access as $item)
			{
				$data = array(
					'Restrict_access' => 1
				);

				$this->db->update('tbl_user_modules', 
					$data, 
						array(
						'Module_ID' => 	$item,
						'User_ID'	=>	$this->ID));
			}

			foreach($this->Full_control as $item)
			{
				$data = array(
					'Full_control' => 1
				);

				$this->db->update('tbl_user_modules', 
					$data, 
						array(
						'Module_ID' => 	$item,
						'User_ID'	=>	$this->ID));
			}

			foreach($this->Read_only as $item)
			{
				$data = array(
					'Read_only' => 1
				);

				$this->db->update('tbl_user_modules', 
					$data, 
						array(
						'Module_ID' => 	$item,
						'User_ID'	=>	$this->ID));
			}

			foreach($this->Write_only as $item)
			{
				$data = array(
					'Write_only' => 1
				);

				$this->db->update('tbl_user_modules', 
					$data, 
						array(
						'Module_ID' => 	$item,
						'User_ID'	=>	$this->ID));
			}
		}
		catch (Exception $ex)
		{
			$error = array('error_message' => $ex->getMessage(), 
				'has_error' => true);
			echo json_encode($error);
		}
	}

	function getAll($search = '')
 	{
		$this->db->select('*');
		$this->db->from('tbl_users');
		if ($search != '')
		{
			$this->db->where('Username', $search);
			$this->db->or_where('First_name', $search);
			$this->db->or_where('Last_name', $search);
		}
		$query = $this->db->get();

		return $query->result();
	}

	function getSingle($id)
 	{
		$this->db->select('*');
		$this->db->from('tbl_users');
		$this->db->where('ID', $id);
		$query = $this->db->get();

		return $query->row();
	}

	function delete_user_module($id)
 	{
		try
		{
			$this->db->delete('tbl_user_modules', 
				array('User_ID' => $id));
		}		
		catch (Exception $ex) 
		{ 
			$error = array('error_message' => $ex->getMessage(), 'has_error' => true); 
			echo json_encode($error);
		}
	}

	function delete($id)
 	{
		try
		{
			$this->db->delete('tbl_users', array('ID' => $id));
		}		
		catch (Exception $ex) 
		{ 
			$error = array('error_message' => $ex->getMessage(), 'has_error' => true); 
			echo json_encode($error);
		}
	}

	function reset_password()
	{
		try
		{
			$salt = salt_generator(32);
			$password = sha1($salt ." ". $this->config->item('default_password') ." ". $salt);
			
			$data = array(
				'Password'	=>	$password,
				'Salt'		=>	$salt
			);

			$this->db->where('ID', $this->ID);
			$this->db->update('tbl_users', $data);
		}		
		catch (Exception $ex) 
		{ 
			$error = array('error_message' => $ex->getMessage(), 'has_error' => true); 
			echo json_encode($error);
		}
	}

	function change_password()
	{
		try
		{
			if (empty($this->password))
			{
				throw new Exception(REQUIRED_FIELD);
			}

			if (strlen($this->password) < 6)
			{
				throw new Exception(PASSWORD_LENGTH);
			}

			$salt = salt_generator(32);
			$password = sha1($salt ." ". $this->password ." ". $salt);

			$data = array(
				'Password'	=>	$password,
				'Salt'		=>	$salt
			);

			$this->db->where('ID', $this->ID);
			$this->db->update('tbl_users', $data);
		}
		catch(Exception $ex)
		{
			$error = array('error_message' => $ex->getMessage(), 'has_error' => true); 
			echo json_encode($error);
		}
	}

	function authenticate($username, $password)
	{
		try
		{
			if (empty($username) || empty($password))
			{
				throw new Exception(REQUIRED_FIELD);
			}

			//
			// check if username exists
			$this->db->select('u.*,'.'p.Position');
			$this->db->from('tbl_users u');
			$this->db->join('tbl_position p', 'p.ID = u.Position_ID', 'left');
			$this->db->where('Username', $username);
			$qry_username = $this->db->get();

			$get_user = $qry_username->row();
			if ($qry_username->num_rows() <= 0)
			{
				throw new Exception(NO_USERNAME_FOUND);
			}

			//
			// check if current account is enabled/disabled
			if ($get_user->Enable <= 0)
			{
				throw new Exception(ACCOUNT_DISABLED);
			}

			//
			// hash password
			$pass = sha1($get_user->Salt ." ". $password ." ". $get_user->Salt);
			if (($username != $get_user->Username) || ($pass != $get_user->Password))
			{
				throw new Exception(INVALID_USERNAME_PASSWORD);
			}

			$this->db->select('*');
			$this->db->from('tbl_user_modules');
			$this->db->where('User_ID', $get_user->ID);
			$qry_modules = $this->db->get()->result();
			foreach ($qry_modules as $key => $value) {
				$this->db->select('*');
				$this->db->from('tbl_modules');
				$this->db->where('ID', $value->Module_ID);
				$module_data = $this->db->get()->first_row();
				$qry_modules[$key]->Module_details =  $module_data;
			}
			$get_modules = $qry_modules;

			//
			// assign value on session variable
			$_SESSION['User_details'] = $get_user;
			$_SESSION['User_modules'] = $get_modules;
			
			if (!empty($_SESSION['User_details']) && !empty($_SESSION['User_modules']))
			{
				$error = array('has_error' => false);
				echo json_encode($error); 
			}
		}
		catch(Exception $ex)
		{
			$error = array('error_message' => $ex->getMessage(), 'has_error' => true); 
			echo json_encode($error);
		}
	}

	// public function get_user_permission($username, $password, $module){
	// 	try
	// 	{
	// 		if (empty($username) || empty($password))
	// 		{
	// 			throw new Exception(REQUIRED_FIELD);
	// 		}

	// 		//
	// 		// check if username exists
	// 		$this->db->select('tbl_users.*, tbl_position.Position');
	// 		$this->db->from('tbl_users');
	// 		$this->db->where('Username', $username);
	// 		$this->db->join('tbl_position', 'tbl_position.ID = tbl_users.position_ID');
	// 		$qry_username = $this->db->get();

	// 		$get_user = $qry_username->row();
	// 		if ($qry_username->num_rows() <= 0)
	// 		{
	// 			throw new Exception(NO_USERNAME_FOUND);
	// 		}

	// 		//
	// 		// check if current account is enabled/disabled
	// 		if ($get_user->Enable <= 0)
	// 		{
	// 			throw new Exception(ACCOUNT_DISABLED);
	// 		}

	// 		//
	// 		// hash password
	// 		$pass = sha1($get_user->Salt ." ". $password ." ". $get_user->Salt);
	// 		if (($username != $get_user->Username) || ($pass != $get_user->Password))
	// 		{
	// 			throw new Exception(INVALID_USERNAME_PASSWORD);
	// 		}

	// 		$this->db->select('*');
	// 		$this->db->from('tbl_user_modules');
	// 		$this->db->where('User_ID', $get_user->ID);
	// 		$this->db->join('tbl_modules', 'tbl_modules.ID = tbl_user_modules.Module_ID');
	// 		$this->db->where('tbl_modules.Link',$module);
	// 		$qry_modules = $this->db->get();

	// 		$get_modules = $qry_modules->first_row();

	// 		if($get_modules == null){
	// 			throw new Exception(MODULE_NOT_FOUND);
	// 		}
	// 		//
	// 		// assign value on session variable
	// 		$user = new \stdClass;
	// 		$user->access_id = $get_user->ID;
	// 		$user->first_name = $get_user->First_name;
	// 		$user->last_name = $get_user->Last_name;
	// 		$permission = new \stdClass;

	// 		$permission->read = $get_modules->Read_only;
	// 		$permission->write = $get_modules->Write_only;
	// 		$permission->approved = $get_modules->Approved_only;
	// 		$modules = $get_modules;
	// 		if (!empty($user) && !empty($modules))
	// 		{
	// 			$error = array(
	// 						'has_error' => false,
	// 						'user_details' => $user,
	// 						'permission' => $permission 
	// 					);
	// 			// echo json_encode($error); 
	// 			return $error;
	// 		}
	// 	}
	// 	catch(Exception $ex)
	// 	{
	// 		$error = array('error_message' => $ex->getMessage(), 'has_error' => true); 
	// 		return $error;
	// 		// echo json_encode($error);
	// 	}
	// }

	public function get_user_permission($key,$module){
		try
		{
			if (empty($key))
			{
				throw new Exception(REQUIRED_FIELD);
			}

			//
			// check if username exists
			$this->db->select('*');
			$this->db->from('tbl_users');
			$this->db->where('U_ID', $key);
			// $this->db->join('tbl_position', 'tbl_position.ID = tbl_users.position_ID');
			$qry_user = $this->db->get();

			$get_user = $qry_user->row();
			if ($qry_user->num_rows() <= 0)
			{
				throw new Exception(ERROR_ACCESS_KEY);
			}

			//
			// check if current account is enabled/disabled
			if ($get_user->Enable <= 0)
			{
				throw new Exception(ERROR_ACCESS_KEY);
			}

			//

			$this->db->select('*');
			$this->db->from('tbl_user_modules');
			$this->db->where('User_ID', $get_user->ID);
			$this->db->join('tbl_modules', 'tbl_modules.ID = tbl_user_modules.Module_ID');
			$this->db->where('tbl_modules.Module_name',$module);
			$qry_modules = $this->db->get();

			$get_modules = $qry_modules->first_row();

			if($get_modules == null){
				throw new Exception(MODULE_NOT_FOUND);
			}
			//
			// assign value on session variable
			$user = new \stdClass;
			$user->access_id = $get_user->ID;
			$user->first_name = $get_user->First_name;
			$user->last_name = $get_user->Last_name;
			$permission = new \stdClass;

		    
			$permission->read = $get_modules->Read_only;
			$permission->write = $get_modules->Write_only;
			$permission->approved = $get_modules->Approved_only;
			$modules = $get_modules;
			if (!empty($user) && !empty($modules))
			{
				$error = array(
							'has_error' => false,
							'user_details' => $user,
							'permission' => $permission 
						);
				// echo json_encode($error); 
				return $error;
			}
		}
		catch(Exception $ex)
		{
			$error = array('error_message' => $ex->getMessage(), 'has_error' => true); 
			return $error;
			// echo json_encode($error);
		}
	}

	public function authenticate_user($username,$password){
		try
		{
			if (empty($username) || empty($password))
			{
				throw new Exception(REQUIRED_FIELD);
			}

			//
			// check if username exists
			$this->db->select('*');
			$this->db->from('tbl_users');
			$this->db->where('Username', $username);
			// $this->db->join('tbl_position', 'tbl_position.ID = tbl_users.position_ID');
			$qry_username = $this->db->get();

			$get_user = $qry_username->row();
			if ($qry_username->num_rows() <= 0)
			{
				throw new Exception(NO_USERNAME_FOUND);
			}

			//
			// check if current account is enabled/disabled
			if ($get_user->Enable <= 0)
			{
				throw new Exception(ACCOUNT_DISABLED);
			}

			//
			// hash password
			$pass = sha1($get_user->Salt ." ". $password ." ". $get_user->Salt);
			if (($username != $get_user->Username) || ($pass != $get_user->Password))
			{
				throw new Exception(INVALID_USERNAME_PASSWORD);
			}

			$user = new \stdClass;
			$user->security_key = $get_user->U_ID;
			$user->first_name = $get_user->First_name;
			$user->last_name = $get_user->Last_name;
			
			if (!empty($user))
			{
				$error = array(
							'has_error' => false,
							'user_details' => $user,
						);
				echo json_encode($error); 
				
			}
		}
		catch(Exception $ex)
		{
			$error = array('error_message' => $ex->getMessage(), 'has_error' => true); 
			// return $error;
			echo json_encode($error);
		}
	}

	function logout()
	{
		unset($_SESSION['User_details']);
		unset($_SESSION['User_modules']);

		if (empty($_SESSION['User_details']) && empty($_SESSION['User_modules']))
		{
			return true;
		}
	}
}